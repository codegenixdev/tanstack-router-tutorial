/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ContactUsRouteImport } from './routes/contact-us'
import { Route as SearchRouteRouteImport } from './routes/search/route'
import { Route as CategoriesRouteRouteImport } from './routes/categories/route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ContactUsCountryRouteImport } from './routes/contact-us.$country'
import { Route as Char123LocaleChar125BlogRouteRouteImport } from './routes/{-$locale}/blog/route'
import { Route as CategoriesCategoryIdRouteRouteImport } from './routes/categories/$categoryId/route'
import { Route as authClientRouteRouteImport } from './routes/(auth)/client/route'
import { Route as authAdminRouteRouteImport } from './routes/(auth)/admin/route'
import { Route as ContactUsCountryCityRouteImport } from './routes/contact-us.$country.$city'
import { Route as authAdminReportsRouteImport } from './routes/(auth)/admin/reports'
import { Route as Char123LocaleChar125BlogTopicIdRouteRouteImport } from './routes/{-$locale}/blog/$topicId/route'
import { Route as CategoriesCategoryIdSubcategoryIdRouteRouteImport } from './routes/categories/$categoryId/$subcategoryId/route'
import { Route as authAdminCategoriesRouteRouteImport } from './routes/(auth)/admin/categories/route'
import { Route as authAdminCategoriesCreateRouteImport } from './routes/(auth)/admin/categories_.create'
import { Route as Char123LocaleChar125BlogTopicIdPostIdRouteRouteImport } from './routes/{-$locale}/blog/$topicId/$postId/route'
import { Route as CategoriesCategoryIdSubcategoryIdProductIdRouteRouteImport } from './routes/categories/$categoryId/$subcategoryId/$productId/route'
import { Route as authClientFilesSplatIndexRouteImport } from './routes/(auth)/client/files/$/index'
import { Route as authAdminCategoriesCategoryIdIndexRouteImport } from './routes/(auth)/admin/categories/$categoryId/index'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactUsRoute = ContactUsRouteImport.update({
  id: '/contact-us',
  path: '/contact-us',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRouteRoute = SearchRouteRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const CategoriesRouteRoute = CategoriesRouteRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactUsCountryRoute = ContactUsCountryRouteImport.update({
  id: '/$country',
  path: '/$country',
  getParentRoute: () => ContactUsRoute,
} as any)
const Char123LocaleChar125BlogRouteRoute =
  Char123LocaleChar125BlogRouteRouteImport.update({
    id: '/{-$locale}/blog',
    path: '/{-$locale}/blog',
    getParentRoute: () => rootRouteImport,
  } as any)
const CategoriesCategoryIdRouteRoute =
  CategoriesCategoryIdRouteRouteImport.update({
    id: '/$categoryId',
    path: '/$categoryId',
    getParentRoute: () => CategoriesRouteRoute,
  } as any)
const authClientRouteRoute = authClientRouteRouteImport.update({
  id: '/(auth)/client',
  path: '/client',
  getParentRoute: () => rootRouteImport,
} as any)
const authAdminRouteRoute = authAdminRouteRouteImport.update({
  id: '/(auth)/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactUsCountryCityRoute = ContactUsCountryCityRouteImport.update({
  id: '/$city',
  path: '/$city',
  getParentRoute: () => ContactUsCountryRoute,
} as any)
const authAdminReportsRoute = authAdminReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => authAdminRouteRoute,
} as any)
const Char123LocaleChar125BlogTopicIdRouteRoute =
  Char123LocaleChar125BlogTopicIdRouteRouteImport.update({
    id: '/$topicId',
    path: '/$topicId',
    getParentRoute: () => Char123LocaleChar125BlogRouteRoute,
  } as any)
const CategoriesCategoryIdSubcategoryIdRouteRoute =
  CategoriesCategoryIdSubcategoryIdRouteRouteImport.update({
    id: '/$subcategoryId',
    path: '/$subcategoryId',
    getParentRoute: () => CategoriesCategoryIdRouteRoute,
  } as any)
const authAdminCategoriesRouteRoute =
  authAdminCategoriesRouteRouteImport.update({
    id: '/categories',
    path: '/categories',
    getParentRoute: () => authAdminRouteRoute,
  } as any)
const authAdminCategoriesCreateRoute =
  authAdminCategoriesCreateRouteImport.update({
    id: '/categories_/create',
    path: '/categories/create',
    getParentRoute: () => authAdminRouteRoute,
  } as any)
const Char123LocaleChar125BlogTopicIdPostIdRouteRoute =
  Char123LocaleChar125BlogTopicIdPostIdRouteRouteImport.update({
    id: '/$postId',
    path: '/$postId',
    getParentRoute: () => Char123LocaleChar125BlogTopicIdRouteRoute,
  } as any)
const CategoriesCategoryIdSubcategoryIdProductIdRouteRoute =
  CategoriesCategoryIdSubcategoryIdProductIdRouteRouteImport.update({
    id: '/$productId',
    path: '/$productId',
    getParentRoute: () => CategoriesCategoryIdSubcategoryIdRouteRoute,
  } as any)
const authClientFilesSplatIndexRoute =
  authClientFilesSplatIndexRouteImport.update({
    id: '/files/$/',
    path: '/files/$/',
    getParentRoute: () => authClientRouteRoute,
  } as any)
const authAdminCategoriesCategoryIdIndexRoute =
  authAdminCategoriesCategoryIdIndexRouteImport.update({
    id: '/$categoryId/',
    path: '/$categoryId/',
    getParentRoute: () => authAdminCategoriesRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRouteRouteWithChildren
  '/search': typeof SearchRouteRoute
  '/contact-us': typeof ContactUsRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof authAdminRouteRouteWithChildren
  '/client': typeof authClientRouteRouteWithChildren
  '/categories/$categoryId': typeof CategoriesCategoryIdRouteRouteWithChildren
  '/{-$locale}/blog': typeof Char123LocaleChar125BlogRouteRouteWithChildren
  '/contact-us/$country': typeof ContactUsCountryRouteWithChildren
  '/admin/categories': typeof authAdminCategoriesRouteRouteWithChildren
  '/categories/$categoryId/$subcategoryId': typeof CategoriesCategoryIdSubcategoryIdRouteRouteWithChildren
  '/{-$locale}/blog/$topicId': typeof Char123LocaleChar125BlogTopicIdRouteRouteWithChildren
  '/admin/reports': typeof authAdminReportsRoute
  '/contact-us/$country/$city': typeof ContactUsCountryCityRoute
  '/categories/$categoryId/$subcategoryId/$productId': typeof CategoriesCategoryIdSubcategoryIdProductIdRouteRoute
  '/{-$locale}/blog/$topicId/$postId': typeof Char123LocaleChar125BlogTopicIdPostIdRouteRoute
  '/admin/categories/create': typeof authAdminCategoriesCreateRoute
  '/admin/categories/$categoryId': typeof authAdminCategoriesCategoryIdIndexRoute
  '/client/files/$': typeof authClientFilesSplatIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRouteRouteWithChildren
  '/search': typeof SearchRouteRoute
  '/contact-us': typeof ContactUsRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof authAdminRouteRouteWithChildren
  '/client': typeof authClientRouteRouteWithChildren
  '/categories/$categoryId': typeof CategoriesCategoryIdRouteRouteWithChildren
  '/{-$locale}/blog': typeof Char123LocaleChar125BlogRouteRouteWithChildren
  '/contact-us/$country': typeof ContactUsCountryRouteWithChildren
  '/admin/categories': typeof authAdminCategoriesRouteRouteWithChildren
  '/categories/$categoryId/$subcategoryId': typeof CategoriesCategoryIdSubcategoryIdRouteRouteWithChildren
  '/{-$locale}/blog/$topicId': typeof Char123LocaleChar125BlogTopicIdRouteRouteWithChildren
  '/admin/reports': typeof authAdminReportsRoute
  '/contact-us/$country/$city': typeof ContactUsCountryCityRoute
  '/categories/$categoryId/$subcategoryId/$productId': typeof CategoriesCategoryIdSubcategoryIdProductIdRouteRoute
  '/{-$locale}/blog/$topicId/$postId': typeof Char123LocaleChar125BlogTopicIdPostIdRouteRoute
  '/admin/categories/create': typeof authAdminCategoriesCreateRoute
  '/admin/categories/$categoryId': typeof authAdminCategoriesCategoryIdIndexRoute
  '/client/files/$': typeof authClientFilesSplatIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/categories': typeof CategoriesRouteRouteWithChildren
  '/search': typeof SearchRouteRoute
  '/contact-us': typeof ContactUsRouteWithChildren
  '/login': typeof LoginRoute
  '/(auth)/admin': typeof authAdminRouteRouteWithChildren
  '/(auth)/client': typeof authClientRouteRouteWithChildren
  '/categories/$categoryId': typeof CategoriesCategoryIdRouteRouteWithChildren
  '/{-$locale}/blog': typeof Char123LocaleChar125BlogRouteRouteWithChildren
  '/contact-us/$country': typeof ContactUsCountryRouteWithChildren
  '/(auth)/admin/categories': typeof authAdminCategoriesRouteRouteWithChildren
  '/categories/$categoryId/$subcategoryId': typeof CategoriesCategoryIdSubcategoryIdRouteRouteWithChildren
  '/{-$locale}/blog/$topicId': typeof Char123LocaleChar125BlogTopicIdRouteRouteWithChildren
  '/(auth)/admin/reports': typeof authAdminReportsRoute
  '/contact-us/$country/$city': typeof ContactUsCountryCityRoute
  '/categories/$categoryId/$subcategoryId/$productId': typeof CategoriesCategoryIdSubcategoryIdProductIdRouteRoute
  '/{-$locale}/blog/$topicId/$postId': typeof Char123LocaleChar125BlogTopicIdPostIdRouteRoute
  '/(auth)/admin/categories_/create': typeof authAdminCategoriesCreateRoute
  '/(auth)/admin/categories/$categoryId/': typeof authAdminCategoriesCategoryIdIndexRoute
  '/(auth)/client/files/$/': typeof authClientFilesSplatIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/categories'
    | '/search'
    | '/contact-us'
    | '/login'
    | '/admin'
    | '/client'
    | '/categories/$categoryId'
    | '/{-$locale}/blog'
    | '/contact-us/$country'
    | '/admin/categories'
    | '/categories/$categoryId/$subcategoryId'
    | '/{-$locale}/blog/$topicId'
    | '/admin/reports'
    | '/contact-us/$country/$city'
    | '/categories/$categoryId/$subcategoryId/$productId'
    | '/{-$locale}/blog/$topicId/$postId'
    | '/admin/categories/create'
    | '/admin/categories/$categoryId'
    | '/client/files/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/categories'
    | '/search'
    | '/contact-us'
    | '/login'
    | '/admin'
    | '/client'
    | '/categories/$categoryId'
    | '/{-$locale}/blog'
    | '/contact-us/$country'
    | '/admin/categories'
    | '/categories/$categoryId/$subcategoryId'
    | '/{-$locale}/blog/$topicId'
    | '/admin/reports'
    | '/contact-us/$country/$city'
    | '/categories/$categoryId/$subcategoryId/$productId'
    | '/{-$locale}/blog/$topicId/$postId'
    | '/admin/categories/create'
    | '/admin/categories/$categoryId'
    | '/client/files/$'
  id:
    | '__root__'
    | '/'
    | '/categories'
    | '/search'
    | '/contact-us'
    | '/login'
    | '/(auth)/admin'
    | '/(auth)/client'
    | '/categories/$categoryId'
    | '/{-$locale}/blog'
    | '/contact-us/$country'
    | '/(auth)/admin/categories'
    | '/categories/$categoryId/$subcategoryId'
    | '/{-$locale}/blog/$topicId'
    | '/(auth)/admin/reports'
    | '/contact-us/$country/$city'
    | '/categories/$categoryId/$subcategoryId/$productId'
    | '/{-$locale}/blog/$topicId/$postId'
    | '/(auth)/admin/categories_/create'
    | '/(auth)/admin/categories/$categoryId/'
    | '/(auth)/client/files/$/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CategoriesRouteRoute: typeof CategoriesRouteRouteWithChildren
  SearchRouteRoute: typeof SearchRouteRoute
  ContactUsRoute: typeof ContactUsRouteWithChildren
  LoginRoute: typeof LoginRoute
  authAdminRouteRoute: typeof authAdminRouteRouteWithChildren
  authClientRouteRoute: typeof authClientRouteRouteWithChildren
  Char123LocaleChar125BlogRouteRoute: typeof Char123LocaleChar125BlogRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact-us': {
      id: '/contact-us'
      path: '/contact-us'
      fullPath: '/contact-us'
      preLoaderRoute: typeof ContactUsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories': {
      id: '/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof CategoriesRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact-us/$country': {
      id: '/contact-us/$country'
      path: '/$country'
      fullPath: '/contact-us/$country'
      preLoaderRoute: typeof ContactUsCountryRouteImport
      parentRoute: typeof ContactUsRoute
    }
    '/{-$locale}/blog': {
      id: '/{-$locale}/blog'
      path: '/{-$locale}/blog'
      fullPath: '/{-$locale}/blog'
      preLoaderRoute: typeof Char123LocaleChar125BlogRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/categories/$categoryId': {
      id: '/categories/$categoryId'
      path: '/$categoryId'
      fullPath: '/categories/$categoryId'
      preLoaderRoute: typeof CategoriesCategoryIdRouteRouteImport
      parentRoute: typeof CategoriesRouteRoute
    }
    '/(auth)/client': {
      id: '/(auth)/client'
      path: '/client'
      fullPath: '/client'
      preLoaderRoute: typeof authClientRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)/admin': {
      id: '/(auth)/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof authAdminRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact-us/$country/$city': {
      id: '/contact-us/$country/$city'
      path: '/$city'
      fullPath: '/contact-us/$country/$city'
      preLoaderRoute: typeof ContactUsCountryCityRouteImport
      parentRoute: typeof ContactUsCountryRoute
    }
    '/(auth)/admin/reports': {
      id: '/(auth)/admin/reports'
      path: '/reports'
      fullPath: '/admin/reports'
      preLoaderRoute: typeof authAdminReportsRouteImport
      parentRoute: typeof authAdminRouteRoute
    }
    '/{-$locale}/blog/$topicId': {
      id: '/{-$locale}/blog/$topicId'
      path: '/$topicId'
      fullPath: '/{-$locale}/blog/$topicId'
      preLoaderRoute: typeof Char123LocaleChar125BlogTopicIdRouteRouteImport
      parentRoute: typeof Char123LocaleChar125BlogRouteRoute
    }
    '/categories/$categoryId/$subcategoryId': {
      id: '/categories/$categoryId/$subcategoryId'
      path: '/$subcategoryId'
      fullPath: '/categories/$categoryId/$subcategoryId'
      preLoaderRoute: typeof CategoriesCategoryIdSubcategoryIdRouteRouteImport
      parentRoute: typeof CategoriesCategoryIdRouteRoute
    }
    '/(auth)/admin/categories': {
      id: '/(auth)/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof authAdminCategoriesRouteRouteImport
      parentRoute: typeof authAdminRouteRoute
    }
    '/(auth)/admin/categories_/create': {
      id: '/(auth)/admin/categories_/create'
      path: '/categories/create'
      fullPath: '/admin/categories/create'
      preLoaderRoute: typeof authAdminCategoriesCreateRouteImport
      parentRoute: typeof authAdminRouteRoute
    }
    '/{-$locale}/blog/$topicId/$postId': {
      id: '/{-$locale}/blog/$topicId/$postId'
      path: '/$postId'
      fullPath: '/{-$locale}/blog/$topicId/$postId'
      preLoaderRoute: typeof Char123LocaleChar125BlogTopicIdPostIdRouteRouteImport
      parentRoute: typeof Char123LocaleChar125BlogTopicIdRouteRoute
    }
    '/categories/$categoryId/$subcategoryId/$productId': {
      id: '/categories/$categoryId/$subcategoryId/$productId'
      path: '/$productId'
      fullPath: '/categories/$categoryId/$subcategoryId/$productId'
      preLoaderRoute: typeof CategoriesCategoryIdSubcategoryIdProductIdRouteRouteImport
      parentRoute: typeof CategoriesCategoryIdSubcategoryIdRouteRoute
    }
    '/(auth)/client/files/$/': {
      id: '/(auth)/client/files/$/'
      path: '/files/$'
      fullPath: '/client/files/$'
      preLoaderRoute: typeof authClientFilesSplatIndexRouteImport
      parentRoute: typeof authClientRouteRoute
    }
    '/(auth)/admin/categories/$categoryId/': {
      id: '/(auth)/admin/categories/$categoryId/'
      path: '/$categoryId'
      fullPath: '/admin/categories/$categoryId'
      preLoaderRoute: typeof authAdminCategoriesCategoryIdIndexRouteImport
      parentRoute: typeof authAdminCategoriesRouteRoute
    }
  }
}

interface CategoriesCategoryIdSubcategoryIdRouteRouteChildren {
  CategoriesCategoryIdSubcategoryIdProductIdRouteRoute: typeof CategoriesCategoryIdSubcategoryIdProductIdRouteRoute
}

const CategoriesCategoryIdSubcategoryIdRouteRouteChildren: CategoriesCategoryIdSubcategoryIdRouteRouteChildren =
  {
    CategoriesCategoryIdSubcategoryIdProductIdRouteRoute:
      CategoriesCategoryIdSubcategoryIdProductIdRouteRoute,
  }

const CategoriesCategoryIdSubcategoryIdRouteRouteWithChildren =
  CategoriesCategoryIdSubcategoryIdRouteRoute._addFileChildren(
    CategoriesCategoryIdSubcategoryIdRouteRouteChildren,
  )

interface CategoriesCategoryIdRouteRouteChildren {
  CategoriesCategoryIdSubcategoryIdRouteRoute: typeof CategoriesCategoryIdSubcategoryIdRouteRouteWithChildren
}

const CategoriesCategoryIdRouteRouteChildren: CategoriesCategoryIdRouteRouteChildren =
  {
    CategoriesCategoryIdSubcategoryIdRouteRoute:
      CategoriesCategoryIdSubcategoryIdRouteRouteWithChildren,
  }

const CategoriesCategoryIdRouteRouteWithChildren =
  CategoriesCategoryIdRouteRoute._addFileChildren(
    CategoriesCategoryIdRouteRouteChildren,
  )

interface CategoriesRouteRouteChildren {
  CategoriesCategoryIdRouteRoute: typeof CategoriesCategoryIdRouteRouteWithChildren
}

const CategoriesRouteRouteChildren: CategoriesRouteRouteChildren = {
  CategoriesCategoryIdRouteRoute: CategoriesCategoryIdRouteRouteWithChildren,
}

const CategoriesRouteRouteWithChildren = CategoriesRouteRoute._addFileChildren(
  CategoriesRouteRouteChildren,
)

interface ContactUsCountryRouteChildren {
  ContactUsCountryCityRoute: typeof ContactUsCountryCityRoute
}

const ContactUsCountryRouteChildren: ContactUsCountryRouteChildren = {
  ContactUsCountryCityRoute: ContactUsCountryCityRoute,
}

const ContactUsCountryRouteWithChildren =
  ContactUsCountryRoute._addFileChildren(ContactUsCountryRouteChildren)

interface ContactUsRouteChildren {
  ContactUsCountryRoute: typeof ContactUsCountryRouteWithChildren
}

const ContactUsRouteChildren: ContactUsRouteChildren = {
  ContactUsCountryRoute: ContactUsCountryRouteWithChildren,
}

const ContactUsRouteWithChildren = ContactUsRoute._addFileChildren(
  ContactUsRouteChildren,
)

interface authAdminCategoriesRouteRouteChildren {
  authAdminCategoriesCategoryIdIndexRoute: typeof authAdminCategoriesCategoryIdIndexRoute
}

const authAdminCategoriesRouteRouteChildren: authAdminCategoriesRouteRouteChildren =
  {
    authAdminCategoriesCategoryIdIndexRoute:
      authAdminCategoriesCategoryIdIndexRoute,
  }

const authAdminCategoriesRouteRouteWithChildren =
  authAdminCategoriesRouteRoute._addFileChildren(
    authAdminCategoriesRouteRouteChildren,
  )

interface authAdminRouteRouteChildren {
  authAdminCategoriesRouteRoute: typeof authAdminCategoriesRouteRouteWithChildren
  authAdminReportsRoute: typeof authAdminReportsRoute
  authAdminCategoriesCreateRoute: typeof authAdminCategoriesCreateRoute
}

const authAdminRouteRouteChildren: authAdminRouteRouteChildren = {
  authAdminCategoriesRouteRoute: authAdminCategoriesRouteRouteWithChildren,
  authAdminReportsRoute: authAdminReportsRoute,
  authAdminCategoriesCreateRoute: authAdminCategoriesCreateRoute,
}

const authAdminRouteRouteWithChildren = authAdminRouteRoute._addFileChildren(
  authAdminRouteRouteChildren,
)

interface authClientRouteRouteChildren {
  authClientFilesSplatIndexRoute: typeof authClientFilesSplatIndexRoute
}

const authClientRouteRouteChildren: authClientRouteRouteChildren = {
  authClientFilesSplatIndexRoute: authClientFilesSplatIndexRoute,
}

const authClientRouteRouteWithChildren = authClientRouteRoute._addFileChildren(
  authClientRouteRouteChildren,
)

interface Char123LocaleChar125BlogTopicIdRouteRouteChildren {
  Char123LocaleChar125BlogTopicIdPostIdRouteRoute: typeof Char123LocaleChar125BlogTopicIdPostIdRouteRoute
}

const Char123LocaleChar125BlogTopicIdRouteRouteChildren: Char123LocaleChar125BlogTopicIdRouteRouteChildren =
  {
    Char123LocaleChar125BlogTopicIdPostIdRouteRoute:
      Char123LocaleChar125BlogTopicIdPostIdRouteRoute,
  }

const Char123LocaleChar125BlogTopicIdRouteRouteWithChildren =
  Char123LocaleChar125BlogTopicIdRouteRoute._addFileChildren(
    Char123LocaleChar125BlogTopicIdRouteRouteChildren,
  )

interface Char123LocaleChar125BlogRouteRouteChildren {
  Char123LocaleChar125BlogTopicIdRouteRoute: typeof Char123LocaleChar125BlogTopicIdRouteRouteWithChildren
}

const Char123LocaleChar125BlogRouteRouteChildren: Char123LocaleChar125BlogRouteRouteChildren =
  {
    Char123LocaleChar125BlogTopicIdRouteRoute:
      Char123LocaleChar125BlogTopicIdRouteRouteWithChildren,
  }

const Char123LocaleChar125BlogRouteRouteWithChildren =
  Char123LocaleChar125BlogRouteRoute._addFileChildren(
    Char123LocaleChar125BlogRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CategoriesRouteRoute: CategoriesRouteRouteWithChildren,
  SearchRouteRoute: SearchRouteRoute,
  ContactUsRoute: ContactUsRouteWithChildren,
  LoginRoute: LoginRoute,
  authAdminRouteRoute: authAdminRouteRouteWithChildren,
  authClientRouteRoute: authClientRouteRouteWithChildren,
  Char123LocaleChar125BlogRouteRoute:
    Char123LocaleChar125BlogRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
